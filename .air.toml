# OpenBPL Air Configuration
# This file tells Air how to watch your Go application and automatically reload it during development

# Root directory to watch. "." means the current directory where you run the air command
root = "."

# Directory for temporary files. Air creates compiled binaries here to avoid cluttering your source code
tmp_dir = "tmp"

# Directory for test data. Air won't clean this directory on exit
testdata_dir = "testdata"

[build]
  # The command to build your application. This is exactly what you'd type manually to compile
  cmd = "go build -o ./tmp/openbpl ./cmd/server"
  
  # Path to the compiled binary that Air will run
  bin = "./tmp/openbpl"
  
  # Additional arguments to pass to your binary when Air runs it
  # Leave empty unless your application needs specific command-line arguments
  args_bin = []
  
  # How long to wait before killing the process during restart (in milliseconds)
  kill_delay = "0s"
  
  # How long to wait after detecting a change before rebuilding (in milliseconds)
  # This prevents rapid rebuilds if you save multiple files quickly
  delay = 0
  
  # Stop building if the root directory changes (useful for preventing infinite loops)
  stop_on_root = false
  
  # Send interrupt signal before force killing the process
  send_interrupt = false
  
  # Directories to exclude from watching
  # These directories either contain generated files or files that shouldn't trigger rebuilds
  exclude_dir = [
    "assets",     # Static files that don't need Go compilation
    "tmp",        # Where Air puts compiled binaries - watching this would create infinite loops
    "vendor",     # Go module dependencies - these rarely change during development
    "testdata",   # Test fixtures and sample data
    "build",      # Build output directory
    "static",     # Static web assets
    "node_modules", # If you have any JavaScript tooling
    ".git",       # Git repository data
    ".idea",      # JetBrains IDE files
    ".vscode"     # Visual Studio Code files
  ]
  
  # File extensions that should trigger a rebuild when changed
  # Focus on files that actually affect your running application
  include_ext = [
    "go",         # Go source files - the main reason Air exists
    "tpl",        # Go template files
    "tmpl",       # Alternative template extension
    "html",       # HTML templates
    "yaml",       # Configuration files
    "yml",        # Alternative YAML extension
    "toml",       # TOML configuration files
    "json"        # JSON configuration or data files
  ]
  
  # Regular expressions for files to exclude from watching
  # Even if the file extension matches include_ext, these patterns will exclude the file
  exclude_regex = [
    "_test\\.go$",    # Go test files - you usually don't want the server restarting for every test change
    "_mock\\.go$",    # Mock files generated by testing tools
    "\\.#",           # Emacs temporary files
    "~$",             # Backup files created by various editors
    "\\.swp$",        # Vim swap files
    "\\.tmp$"         # Temporary files
  ]
  
  # Specific files to exclude (full paths relative to root)
  exclude_file = []
  
  # Specific directories to include (overrides exclude_dir for these paths)
  include_dir = []
  
  # Specific files to include (overrides exclude patterns for these files)
  include_file = []
  
  # Follow symbolic links when watching for changes
  follow_symlink = false
  
  # Use polling instead of filesystem events (useful for network drives or certain filesystems)
  poll = false
  
  # Polling interval in milliseconds (only used if poll = true)
  poll_interval = 0
  
  # Whether to exclude files that haven't changed (performance optimization)
  exclude_unchanged = false
  
  # Whether to rerun the build command when it fails
  rerun = false
  
  # Delay before rerunning after a failed build (in milliseconds)
  rerun_delay = 500
  
  # Full command to run instead of just the binary (rarely needed)
  full_bin = ""
  
  # Log file for build errors (helpful for debugging build issues)
  log = "build-errors.log"

[color]
  # Customize the colors Air uses in its output
  # This helps you quickly identify different types of messages
  main = "magenta"     # Color for main Air messages
  watcher = "cyan"     # Color for file watching messages  
  build = "yellow"     # Color for build process messages
  runner = "green"     # Color for application runtime messages
  app = ""             # Color for your application's output (empty means no special color)

[log]
  # Whether to show only main process logs, hiding build and watcher details
  main_only = false
  
  # Whether to add timestamps to Air's log messages
  time = false

[misc]
  # Whether to clean the tmp_dir when Air exits
  # Set to true if you want Air to clean up after itself, false if you want to inspect build artifacts
  clean_on_exit = false

[screen]
  # Whether to clear the terminal screen before each rebuild
  # This gives you a clean slate for each rebuild, making it easier to spot new errors
  clear_on_rebuild = false
  
  # Whether to preserve scroll position when rebuilding
  # Set to false if you want to always see the latest output at the top
  keep_scroll = true